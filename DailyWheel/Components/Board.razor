<div class="board">

    @foreach (var pos in EnumerateSpaces())
    {
        var space = pos.Space;
        <div>
            @if (EditMode && !space.NeverUsed)
            {
                <span>
                    <input type="checkbox" @onchange="@(e => GivenCheckChange(e, pos.Row, pos.Col))" />
                </span>
            }

            <input @ref="spaceRefs[pos.Row, pos.Col]"
                   class="@(SpaceInputCssClasses(pos))"
                   @oninput="@(e => SpaceOnInput(e, pos.Row, pos.Col))"
                   onfocus="this.select();"
                   disabled="@space.NeverUsed"
                   readonly="@(!IsEditable(space))"
                   value="@(space.IsGiven || EditMode ? space.Letter : "")"
                   maxlength="1" />
        </div>
    }
</div>

@code {
    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public BoardSpace[,] BoardState { get; set; } = BoardSpace.CreateEmptyBoard();

    ElementReference[,] spaceRefs { get; set; } = new ElementReference[BoardDimensions.Rows, BoardDimensions.Columns];

    char?[,] guesses { get; set; } = new char?[BoardDimensions.Rows, BoardDimensions.Columns];
    bool guessCheckingEnabled;

    string SpaceInputCssClasses(BoardPosition position)
    {
        var boardSpace = position.Space;
        var classes = new List<string>() { "space-input" };
        bool solvableSpace = !boardSpace.IsGiven && boardSpace.InPlay;
        bool correctGuess = boardSpace.Letter == guesses[position.Row, position.Col];

        if (!boardSpace.InPlay)
            classes.Add("unused-space");
        if (EditMode && solvableSpace)
            classes.Add("hidden-space");
        if (solvableSpace && guessCheckingEnabled && correctGuess)
            classes.Add("text-success");
        if (solvableSpace && guessCheckingEnabled && !correctGuess)
            classes.Add("text-danger");

        return String.Join(" ", classes);
    }

    void GivenCheckChange(ChangeEventArgs e, int row, int col)
    {
        BoardState[row, col].IsGiven = (bool?)e.Value ?? false;
    }

    async Task SpaceOnInput(ChangeEventArgs e, int row, int col)
    {
        string? inputValue = (string?)e.Value;
        char? inputLetter = string.IsNullOrWhiteSpace(inputValue) 
            ? null 
            : inputValue?.FirstOrDefault();
        await InputReceived(inputLetter, row, col);
    }

    async Task InputReceived(char? letter, int row, int col)
    {
        if (EditMode)
            BoardState[row, col].Letter = letter;
        else
            guesses[row, col] = letter;

        var nextSpace = FindNextEditableSpace(row, col);
        if (nextSpace.HasValue)
            await nextSpace.Value.FocusAsync();
    }

    ElementReference? FindNextEditableSpace(int startRow, int startCol)
    {
        var space = EnumerateSpaces(startRow, startCol).Skip(1).FirstOrDefault(bp => IsEditable(bp.Space));
        if (space == null)
            return null;
        return spaceRefs[space.Row, space.Col];

    }

    bool IsEditable(BoardSpace boardSpace)
    {
        return !boardSpace.NeverUsed && (EditMode || (!EditMode && boardSpace.InPlay && !boardSpace.IsGiven));
    }

    IEnumerable<BoardPosition> EnumerateSpaces(int startRow = 0, int startCol = 0)
    {
        for (int row = startRow; row < BoardState.GetLength(0); row++)
        {
            for (int col = row == startRow ? startCol : 0; col < BoardState.GetLength(1); col++)
            {
                yield return new BoardPosition(BoardState[row, col], row, col);
            }
        }
    }

    record BoardPosition(BoardSpace Space, int Row, int Col);

    public void CheckGuesses()
    {
        guessCheckingEnabled = true;
    }

    public void ShowSolution()
    {
        foreach (var pos in EnumerateSpaces())
        {
            if (!pos.Space.IsGiven && pos.Space.InPlay)
                pos.Space.IsGiven = true;
        }
    }
}