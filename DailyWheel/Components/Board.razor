<div class="board">

    @foreach (var pos in EnumerateSpaces(0, 0))
    {
        var space = pos.Space;
        <input @ref="spaceRefs[pos.Row, pos.Col]"
               class="space-input @(space.InPlay ? "" : "unused-space")"
               @onkeyup="@(e => SpaceInputKeyup(e, pos.Row, pos.Col))"
               disabled="@space.NeverUsed"
               readonly="@(!IsEditable(space))"
               value="@space.Letter"
               maxlength="1" />
    }
</div>

@code {
    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public BoardSpace[,] BoardState { get; set; } = BoardSpace.CreateEmptyBoard();

    ElementReference[,] spaceRefs { get; set; } = new ElementReference[BoardDimensions.Rows, BoardDimensions.Columns];

    async Task SpaceInputKeyup(KeyboardEventArgs e, int row, int col)
    {
        if (e.Key.Length == 1)
        {
            BoardState[row, col].Letter = e.Key.Single();
            var nextSpace = FindNextEditableSpace(row, col);
            if(nextSpace.HasValue)
                await nextSpace.Value.FocusAsync();
        }
    }

    ElementReference? FindNextEditableSpace(int startRow, int startCol)
    {
        var space = EnumerateSpaces(startRow, startCol).Skip(1).FirstOrDefault(bp => IsEditable(bp.Space));
        if (space == null)
            return null;
        return spaceRefs[space.Row, space.Col];

    }

    bool IsEditable(BoardSpace boardSpace)
    {
        return !boardSpace.NeverUsed && (EditMode || (!EditMode && boardSpace.InPlay && !boardSpace.IsGiven));
    }

    IEnumerable<BoardPosition> EnumerateSpaces(int startRow, int startCol)
    {
        for (int row = startRow; row < BoardState.GetLength(0); row++)
        {
            for (int col = row == startRow ? startCol : 0; col < BoardState.GetLength(1); col++)
            {
                yield return new BoardPosition(BoardState[row, col], row, col);
            }
        }
    }

    record BoardPosition(BoardSpace Space, int Row, int Col);
}